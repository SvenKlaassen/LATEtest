p.setup <- c("foreach", "doParallel", "mvtnorm")
rm(list=ls())
#p.latetest <- c("grf", "rlearner", "rpart", "treeClust")
packages <- c("foreach", "doParallel", "mvtnorm")
invisible(lapply(packages, library, character.only = TRUE))
setwd("/Users/helmut/Documents/GitHub/LATEtest/Simulations")   # set working directory path
source("dgp_setup.R")
#################################################
# Simulations from
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rlearner", "rpart", "treeClust")
packages <- c("foreach", "doParallel", "mvtnorm")
invisible(lapply(packages, library, character.only = TRUE))
setwd("/Users/helmut/Documents/GitHub/LATEtest/Simulations")   # set working directory path
source("dgp_setup.R")
######################################################################################
seed=1234
set.seed(seed)
setwd("./Results")
##### Setup DGP #####
#####################
setup <- "A"          # A: randomized experiment, B: easy confounding of Z and strong confounding of D
n <- 3000             # number of observations
R <- 8             # number of Monte Carlo replications
subsets <- 4
siglevel <- 0.05
##### Setup parallel computing #####
####################################
system <- Sys.info()['sysname']
if(system == 'Windows') {
cl <- makeCluster(detectCores())
clusterEvalQ(cl, c(library(grf),library(rlearner),library(rpart),library(treeClust),library(mvtnorm)))
} else if(system == 'Darwin') {
cl <- makeForkCluster(detectCores())
}
registerDoParallel(cl)
showConnections()
sink(file=paste("1-FGK","_setup",setup,".txt",sep=""), split=TRUE)
print(Sys.time())
print("-----------------------")
print("setup, n, R, seed, subsets, siglevel")
print(paste(setup, n, R, seed, subsets, siglevel, sep=" / "))
print("--------------------------------------------")
print("--------------------------------------------")
##### Run simulation #####
##########################
for (dgp in 0:5) {         #loop over all dgps; see dgp_setup.R
start_time = Sys.time()
sim <- foreach(r=1:R, .combine=rbind) %dopar% {
set.seed(r)
data <- fct_datasim(setup=setup, dgp=dgp)
test <- LATEtest(data=data, covars=paste0(colnames(data)[4:ncol(data)]), subsets=subsets, alpha=siglevel)
return(c(r, test$results$Tmax,test$results$cv,test$results$reject,test$results$nu_ineq))
}
end_time = Sys.time()
print(end_time - start_time)
colnames(sim) <- c("round","Tmax0","Tmax1","Tmax2","cv0","cv1","cv2","reject0","reject1","reject2","dim0","dim1","dim2")
sim <- as.data.frame(sim)
##### Display results #####
###########################
print("dgp")
print(dgp)
options(digits=3); print(head(sim)); options(digits=4)
print("summary(sim$Tmax0/1/2)")
print(rbind(summary(sim$Tmax0),summary(sim$Tmax1),summary(sim$Tmax2)))
print("summary(sim$cv0/1/2)")
print(rbind(summary(sim$cv0),summary(sim$cv1),summary(sim$cv2)))
print("mean(sim$reject0/1/2)")
print(c(mean(sim$reject0),mean(sim$reject1),mean(sim$reject2)))
print("")
print("summary(sim$dim0/1/2)")
print(rbind(summary(sim$dim0),summary(sim$dim1),summary(sim$dim2)))
print("table(sim$dim0)")
print(table(sim$dim0))
print("table(sim$dim1)")
print(table(sim$dim1))
print("table(sim$dim2)")
print(table(sim$dim2))
save.image(file=paste("1-FGKtest","_setup",setup,"_dgp",dgp,".Rdata",sep=""))
print("--------------------------------------")
}
sink(file=NULL)
stopCluster(cl)
registerDoParallel()
#################################################
# Simulations from
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rlearner", "rpart", "treeClust")
packages <- c("LATEtest","foreach", "doParallel", "mvtnorm")
invisible(lapply(packages, library, character.only = TRUE))
setwd("/Users/helmut/Documents/GitHub/LATEtest/Simulations")   # set working directory path
source("dgp_setup.R")
######################################################################################
seed=1234
set.seed(seed)
setwd("./Results")
##### Setup DGP #####
#####################
setup <- "A"          # A: randomized experiment, B: easy confounding of Z and strong confounding of D
n <- 3000             # number of observations
R <- 8             # number of Monte Carlo replications
subsets <- 4
siglevel <- 0.05
##### Setup parallel computing #####
####################################
system <- Sys.info()['sysname']
if(system == 'Windows') {
cl <- makeCluster(detectCores())
clusterEvalQ(cl, c(library(grf),library(rlearner),library(rpart),library(treeClust),library(mvtnorm)))
} else if(system == 'Darwin') {
cl <- makeForkCluster(detectCores())
}
registerDoParallel(cl)
showConnections()
sink(file=paste("1-FGK","_setup",setup,".txt",sep=""), split=TRUE)
print(Sys.time())
print("-----------------------")
print("setup, n, R, seed, subsets, siglevel")
print(paste(setup, n, R, seed, subsets, siglevel, sep=" / "))
print("--------------------------------------------")
print("--------------------------------------------")
##### Run simulation #####
##########################
for (dgp in 0:5) {         #loop over all dgps; see dgp_setup.R
start_time = Sys.time()
sim <- foreach(r=1:R, .combine=rbind) %dopar% {
set.seed(r)
data <- fct_datasim(setup=setup, dgp=dgp)
test <- LATEtest(data=data, covars=paste0(colnames(data)[4:ncol(data)]), subsets=subsets, alpha=siglevel)
return(c(r, test$results$Tmax,test$results$cv,test$results$reject,test$results$nu_ineq))
}
end_time = Sys.time()
print(end_time - start_time)
colnames(sim) <- c("round","Tmax0","Tmax1","Tmax2","cv0","cv1","cv2","reject0","reject1","reject2","dim0","dim1","dim2")
sim <- as.data.frame(sim)
##### Display results #####
###########################
print("dgp")
print(dgp)
options(digits=3); print(head(sim)); options(digits=4)
print("summary(sim$Tmax0/1/2)")
print(rbind(summary(sim$Tmax0),summary(sim$Tmax1),summary(sim$Tmax2)))
print("summary(sim$cv0/1/2)")
print(rbind(summary(sim$cv0),summary(sim$cv1),summary(sim$cv2)))
print("mean(sim$reject0/1/2)")
print(c(mean(sim$reject0),mean(sim$reject1),mean(sim$reject2)))
print("")
print("summary(sim$dim0/1/2)")
print(rbind(summary(sim$dim0),summary(sim$dim1),summary(sim$dim2)))
print("table(sim$dim0)")
print(table(sim$dim0))
print("table(sim$dim1)")
print(table(sim$dim1))
print("table(sim$dim2)")
print(table(sim$dim2))
save.image(file=paste("1-FGKtest","_setup",setup,"_dgp",dgp,".Rdata",sep=""))
print("--------------------------------------")
}
sink(file=NULL)
stopCluster(cl)
registerDoParallel()
n = 3000; p = 3
u <- rnorm(n, p)
?rnorm
u <- rnorm(n)
?sqrt
n = 3000; p = 3; rho=0.3
u <- rnorm(n)
v <- rho*u + sqrt(1-rho^2)*rnorm(n)
t(u)*u/n
u*t(u)/n
summary(u)
summary(v)
cor(u,v)
n = 3000; p = 3; rho=-0.5
u <- rnorm(n)
v <- rho*u + sqrt(1-rho^2)*rnorm(n)
summary(u,v)
summary(u)
summary(v)
cor(u,v)
n = 3000; p = 3; rho=0.3
u <- rnorm(n)
v <- rho*u + sqrt(1-rho^2)*rnorm(n)
X <- matrix(rnorm(n * p), n, p)
colnames(X) <- paste("Xvar", 1:p, sep="")
Z <- rbinom(n, size = 1, prob = 0.5)
D<-as.numeric(0.2 * Z + v > 0)
# Local violation of the exclusion restriction:
gamma <- as.numeric(ifelse(X[, 2] < -1, 1.25, 0))
Y <- as.vector(D + gamma * Z + u)
data <- as.data.frame(cbind(Y,D,Z,X))
# Perform test:
covars = paste0(colnames(data)[4:ncol(data)])
test <- LATEtest(data = data, covars = covars, subsets = 4, alpha = 0.05)
test
# Draw plot of pruned tree that led to local violation of LATE assumptions:
maxtree <- eval(parse(text = paste("test$treelist$tree_", test$maxTtree$label, test$maxTtree$J,sep = "")))
rpart.plot::rpart.plot(maxtree, extra = 101, box.palette = "GyRd", shadow.col = "gray", nn = TRUE, roundint = FALSE)
library("LATEtest")
devtools::load_all()
n = 3000; p = 3; rho=0.3
u <- rnorm(n)
v <- rho*u + sqrt(1-rho^2)*rnorm(n)
X <- matrix(rnorm(n * p), n, p)
colnames(X) <- paste("Xvar", 1:p, sep="")
Z <- rbinom(n, size = 1, prob = 0.5)
D<-as.numeric(0.2 * Z + v > 0)
# Local violation of the exclusion restriction:
gamma <- as.numeric(ifelse(X[, 2] < -1, 1.25, 0))
Y <- as.vector(D + gamma * Z + u)
data <- as.data.frame(cbind(Y,D,Z,X))
# Perform test:
covars = paste0(colnames(data)[4:ncol(data)])
test <- LATEtest(data = data, covars = covars, subsets = 4, alpha = 0.05)
test
# Draw plot of pruned tree that led to local violation of LATE assumptions:
maxtree <- eval(parse(text = paste("test$treelist$tree_", test$maxTtree$label, test$maxTtree$J,sep = "")))
rpart.plot::rpart.plot(maxtree, extra = 101, box.palette = "GyRd", shadow.col = "gray", nn = TRUE, roundint = FALSE)
document()   # document() is a fct of devtools, which uses Roxygen2 to create manuals automatically
library(devtools)
document()   # document() is a fct of devtools, which uses Roxygen2 to create manuals automatically
document()   # document() is a fct of devtools, which uses Roxygen2 to create manuals automatically
document()   # document() is a fct of devtools, which uses Roxygen2 to create manuals automatically
use_package("rpart", "Suggests")
use_package("treeClust", "Suggests")
use_package("rpart.plot", "Suggests")   # Suggests: (in DESCRIPTION)
check()
check()
check()
LATEtest::estimation()
LATEtest::estimation
document()   # document() is a fct of devtools, which uses Roxygen2 to create manuals automatically
check()
check()
check()
check()
check()
check()
rm(list=ls())
#p.latetest <- c("grf", "rpart", "treeClust")
#p.lategraphs <- c("data.table", "rattle", "rpart.plot")
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Desktop/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Desktop/LATEtest")      # my path Mac
}
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rpart", "treeClust")
#p.lategraphs <- c("data.table", "rattle", "rpart.plot")
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Desktop/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Desktop/LATEtest")      # my path Mac
}
set.seed(10101)
options(max.print=10000)
setwd("../Application")
source('~/Desktop/LATEtest/AE98.R')
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rpart", "treeClust")
#p.lategraphs <- c("data.table", "rattle", "rpart.plot")
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Documents/GitHub/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Documents/GitHub/LATEtest")      # my path Mac
}
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rpart", "treeClust")
#p.lategraphs <- c("data.table", "rattle", "rpart.plot")
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Documents/GitHub/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Documents/GitHub/LATEtest")      # my path Mac
}
set.seed(10101)
options(max.print=10000)
setwd("../Application")
data<-read.dta13("AE98_data.dta")
nrow(data)
setwd("./Application")
data<-read.dta13("AE98_data.dta")
nrow(data)
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
#p.latetest <- c("grf", "rpart", "treeClust")
#p.lategraphs <- c("data.table", "rattle", "rpart.plot")
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Documents/GitHub/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Documents/GitHub/LATEtest")      # my path Mac
}
set.seed(10101)
#options(max.print=10000)
setwd("./Application")
data<-read.dta13("AE98_data.dta")
nrow(data)
subsets <- 4
synthetic <- TRUE     # adds synthetic direct effects to the outcome
Xvars <- paste0(c("age","agefst","othrace","white","black","hisp","lesshs","hs","morehs"))
data$Y <- data$lincome
data$D <- data$morekids
data$Z <- data$samesex
if(synthetic==TRUE) {
subset <- data$age<25 & data$hs==1
table(data$hs,data$age)
table(subset(data.frame(data$hs,data$age),subset))
table(subset(data.frame(data$Z,data$D),subset))
print("mean(data$Y)")
print(mean(data$Y))
print("sd(data$Y)")
print(sd(data$Y))
print("length(subset(data$Y,subset))")
print(length(subset(data$Y,subset)))
print("length(subset(data$Y,subset))/nrow(data)")
print(length(subset(data$Y,subset))/nrow(data))
print("mean(subset(data$Y,(subset)))")
print(mean(subset(data$Y,(subset))))
effect_size <- 1/4*sd(data$Y)
print("effect_size")
print(effect_size)
data$Y <- data$Y + effect_size*subset*data$Z
print("mean(subset(data$Y,subset))")
print(mean(subset(data$Y,subset)))
print("mean(data$Y)")
print(mean(data$Y))
}
start_time = Sys.time()
test <- LATEtest(data=data, covars=Xvars, subsets=subsets, huge=TRUE, tree_fraction=0.05, alpha=0.05, minsize=800)
test
end_time = Sys.time()
end_time - start_time
maxtree <- eval(parse( text=paste("test$treelist$tree_",test$maxTtree$label,test$maxTtree$J,sep="") ))
rpart.plot(maxtree,extra = 101,box.palette="GyRd",shadow.col="gray",nn=TRUE,roundint=FALSE)
sink(file=paste("AE98_FGK_synth_",synthetic,".txt",sep=""), split=TRUE)
print(Sys.time())
end_time - start_time
print("test$results")
test$results
print("test$leafinfo")
test$leafinfo
sink(file=NULL)
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Documents/GitHub/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Documents/GitHub/LATEtest")      # my path Mac
}
set.seed(10101)
setwd("./Application")
data<-read.dta13("AE98_data.dta")
nrow(data)
subsets <- 4
synthetic <- TRUE     # adds synthetic direct effects to the outcome (empirical Monte-Carlo simulation)
Xvars <- paste0(c("age","agefst","othrace","white","black","hisp","lesshs","hs","morehs"))
data$Y <- data$lincome
data$D <- data$morekids
data$Z <- data$samesex
if(synthetic==TRUE) {
subset <- data$age<25 & data$hs==1
table(data$hs,data$age)
table(subset(data.frame(data$hs,data$age),subset))
table(subset(data.frame(data$Z,data$D),subset))
print("mean(data$Y)")
print(mean(data$Y))
print("sd(data$Y)")
print(sd(data$Y))
print("length(subset(data$Y,subset))")
print(length(subset(data$Y,subset)))
print("length(subset(data$Y,subset))/nrow(data)")
print(length(subset(data$Y,subset))/nrow(data))
print("mean(subset(data$Y,(subset)))")
print(mean(subset(data$Y,(subset))))
effect_size <- 1/4*sd(data$Y)
print("effect_size")
print(effect_size)
data$Y <- data$Y + effect_size*subset*data$Z
print("mean(subset(data$Y,subset))")
print(mean(subset(data$Y,subset)))
print("mean(data$Y)")
print(mean(data$Y))
}
start_time = Sys.time()
test <- LATEtest(data=data, covars=Xvars, subsets=subsets, huge=TRUE, tree_fraction=0.05, alpha=0.05, minsize=800)
end_time = Sys.time()
maxtree <- eval(parse(text=paste("test$treelist$tree_",test$maxTtree$label,test$maxTtree$J,sep="")))
rpart.plot(maxtree,extra = 101,box.palette="GyRd",shadow.col="gray",nn=TRUE,roundint=FALSE)
sink(file=paste("AE98_FGK_synth_",synthetic,".txt",sep=""), split=TRUE)
print(Sys.time())
end_time - start_time
print("test$leafinfo")
test$leafinfo
print("test$results")
test$results
sink(file=NULL)
#################################################
# Application in
# "Instrument Validity Tests with Causal Forests"
# Helmut Farbmacher et al 2020
# May 2020
#################################################
rm(list=ls())
packages <- c("LATEtest","readstata13", "dummies")
invisible(lapply(packages, library, character.only=T))
system <- Sys.info()['sysname']
if(system == 'Windows') {
setwd("C:/Users/farbma/Documents/GitHub/LATEtest")    # my path Windows
} else if(system == 'Darwin') {
setwd("/Users/helmut/Documents/GitHub/LATEtest")      # my path Mac
}
set.seed(10101)
setwd("./Application")
data<-read.dta13("AE98_data.dta")
nrow(data)
subsets <- 4
synthetic <- FALSE     # adds synthetic direct effects to the outcome (empirical Monte-Carlo simulation)
Xvars <- paste0(c("age","agefst","othrace","white","black","hisp","lesshs","hs","morehs"))
data$Y <- data$lincome
data$D <- data$morekids
data$Z <- data$samesex
if(synthetic==TRUE) {
subset <- data$age<25 & data$hs==1
table(data$hs,data$age)
table(subset(data.frame(data$hs,data$age),subset))
table(subset(data.frame(data$Z,data$D),subset))
print("mean(data$Y)")
print(mean(data$Y))
print("sd(data$Y)")
print(sd(data$Y))
print("length(subset(data$Y,subset))")
print(length(subset(data$Y,subset)))
print("length(subset(data$Y,subset))/nrow(data)")
print(length(subset(data$Y,subset))/nrow(data))
print("mean(subset(data$Y,(subset)))")
print(mean(subset(data$Y,(subset))))
effect_size <- 1/4*sd(data$Y)
print("effect_size")
print(effect_size)
data$Y <- data$Y + effect_size*subset*data$Z
print("mean(subset(data$Y,subset))")
print(mean(subset(data$Y,subset)))
print("mean(data$Y)")
print(mean(data$Y))
}
start_time = Sys.time()
test <- LATEtest(data=data, covars=Xvars, subsets=subsets, huge=TRUE, tree_fraction=0.05, alpha=0.05, minsize=800)
end_time = Sys.time()
maxtree <- eval(parse(text=paste("test$treelist$tree_",test$maxTtree$label,test$maxTtree$J,sep="")))
rpart.plot(maxtree,extra = 101,box.palette="GyRd",shadow.col="gray",nn=TRUE,roundint=FALSE)
sink(file=paste("AE98_FGK_synth_",synthetic,".txt",sep=""), split=TRUE)
print(Sys.time())
end_time - start_time
print("test$leafinfo")
test$leafinfo
print("test$results")
test$results
sink(file=NULL)
